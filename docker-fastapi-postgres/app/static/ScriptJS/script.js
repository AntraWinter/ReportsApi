let rowCount = 0;
let isEditMode = true;

function addRow() {
  rowCount++;
  const tbody = document.getElementById('tableBody');
  const row = document.createElement('tr');

  row.innerHTML = `
    <td data-label="‚Ññ" id="id">${rowCount}</td>
    <td data-label="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"><textarea id="location" rows="2" placeholder="–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"></textarea></td>
    <td data-label="–û–ø–∏—Å–∞–Ω–∏–µ"><textarea id="defect_description" rows="2" placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ñ–µ–∫—Ç"></textarea></td>
    <td data-label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –ì–û–°–¢">
      <select id="defect_category" required>
        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
        <option value="—É—Å—Ç—Ä–∞–Ω–∏–º—ã–π">—É—Å—Ç—Ä–∞–Ω–∏–º—ã–π</option>
        <option value="–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π">–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
      </select>
    </td>
    <td data-label="–ú–µ—Ç–æ–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"><textarea id="elimination_method" rows="2" placeholder="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –º–µ—Ç–æ–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"></textarea></td>
    <td data-label="–§–æ—Ç–æ">
      <input id="photo" type="file" accept="image/*" onchange="previewImage(event, this)">
      <div class="preview-container"></div>
    </td>
    <td data-label="–°—Å—ã–ª–∫–∞">
      <div class="link-container">
        <textarea id="tag_link" rows="1" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É" oninput="toggleIcon(this)"></textarea>
        <img src="https://img.icons8.com/ios-filled/24/external-link.png" class="link-icon" alt="–°—Å—ã–ª–∫–∞">
      </div>
    </td>
    <td data-label="–î–µ–π—Å—Ç–≤–∏–µ"><button type="button" class="remove-btn" onclick="removeRow(this)">üóë –£–¥–∞–ª–∏—Ç—å</button></td>
  `;
  tbody.appendChild(row);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const fileInput = row.querySelector('input[type="file"]');
  fileInput.addEventListener('change', function(e) {
    previewImage(e, this);
  });
}

function removeRow(button) {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É?')) {
    const row = button.closest('tr');
    row.remove();
    updateRowNumbers();
  }
}

function updateRowNumbers() {
  const rows = document.querySelectorAll('#tableBody tr');
  rowCount = 0;
  rows.forEach((row, index) => {
    rowCount++;
    row.cells[0].textContent = rowCount;
  });
}

function previewImage(event, input) {
  const container = input.nextElementSibling;
  const file = event.target.files[0];
  const row = input.closest('tr');
  
  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      container.innerHTML = `
        <img src="${e.target.result}" class="preview-img">
        <button type="button" class="remove-btn" onclick="removeImage(this)" style="width: 100%; margin-top: 8px;">üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ</button>
      `;
      row.classList.add('has-photo');
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É textarea –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
      const textareas = row.querySelectorAll('textarea');
      textareas.forEach(ta => {
        ta.style.height = '100px';
      });
    };
    reader.readAsDataURL(file);
  }
}

function removeImage(button) {
  const container = button.parentElement;
  const fileInput = container.previousElementSibling;
  const row = container.closest('tr');
  
  fileInput.value = "";
  container.innerHTML = "";
  row.classList.remove('has-photo');
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É textarea
  const textareas = row.querySelectorAll('textarea');
  textareas.forEach(ta => {
    ta.style.height = '';
  });
}

function toggleIcon(textarea) {
  const icon = textarea.nextElementSibling;
  icon.style.display = textarea.value.trim() ? "inline-block" : "none";
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
function format(command) {
  document.execCommand(command, false, null);
  document.getElementById('text-editor').focus();
}

function insertLink() {
  const url = prompt("–í–≤–µ–¥–∏—Ç–µ URL —Å—Å—ã–ª–∫–∏:", "https://");
  if (url) {
    document.execCommand("createLink", false, url);
  }
}

function toggleEditMode() {
  const editor = document.getElementById('text-editor');
  const toggleBtn = document.getElementById('toggleBtn');
  
  isEditMode = !isEditMode;
  editor.contentEditable = isEditMode;
  toggleBtn.textContent = isEditMode ? "üîí –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞" : "‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è";
}

function setFontSize(size) {
  if (size) document.execCommand('fontSize', false, size);
}

function setFontFamily(font) {
  if (font) document.execCommand('fontName', false, font);
}

function alignText(alignment) {
  document.execCommand('justify' + alignment);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = function() {
  addRow();
  document.getElementById('text-editor').focus();
};


async function saveTableData() {
    const rows = [];
    const table = document.querySelector('tbody');
    const tableRows = table.querySelectorAll('tr');
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    tableRows.forEach(row => {
        const rowData = {
            location: row.querySelector('#location').value,
            defect_description: row.querySelector('#defect_description').value,
            defect_category: row.querySelector('#defect_category').value,
            elimination_method: row.querySelector('#elimination_method').value,
            photo: row.querySelector('#photo').files[0]?.name || null,
            tag_link: row.querySelector('#tag_link').value || null
        };
        rows.push(rowData);
    });
    
    try {
        const response = await fetch('/save-table-data/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(rows)
        });
        
        const result = await response.json();
        if (response.ok) {
            alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + result.detail);
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error);
    }
}

